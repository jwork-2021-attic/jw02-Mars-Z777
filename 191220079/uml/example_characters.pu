@startuml

class Scene [[java:W02.example.Scene]] {
	+{static} main(args: String[]): void
}

class BubbleSorter [[java:W02.example.BubbleSorter]] {
	-a: int[]
	-plan: String
	+load(a: int[]): void
	-swap(i: int, j: int): void
	+sort(): void
	+getPlan(): String
}

interface Sorter {
}
Sorter <|.. BubbleSorter

class Line [[java:W02.example.Line]] {
	-positions: Position[]
	+Line(length: int)
	+put(linable: Linable, i: int): void
	+get(i: int): Linable
	+toString(): String
}

class Linable {
}
Line --> "*" Linable : toArray()
interface Linable [[java:W02.example.Linable]] {
	setPosition(position: Position): void
	getPosition(): Position
	getValue(): int
}

enum Gourd [[java:W02.example.Gourd]] {
	ONE
	TWO
	THREE
	FOUR
	FIVE
	SIX
	SEVEN
	r
	g
	b
	position
	~Gourd(r: int, g: int, b: int)
	+{static} getGourdByRank(rank: int): Gourd
	+rank(): int
	+toString(): String
	+setPosition(position: Position): void
	+getPosition(): Position
	+swapPosition(another: Gourd): void
	+getValue(): int
}

interface Linable {
}
Linable <|.. Gourd

class Geezer [[java:W02.example.Geezer]] {
	-{static} theGeezer: Geezer
	+{static} getTheGeezer(): Geezer
	-Geezer()
	+setSorter(sorter: Sorter): void
	+lineUp(line: Line): String
	-parsePlan(plan: String): String[]
	-execute(step: String): void
}

class Sorter {
}
Geezer --> "1" Sorter : sorter

interface Sorter [[java:W02.example.Sorter]] {
	load(elements: int[]): void
	sort(): void
	getPlan(): String
}

@enduml